#*******************************************************************************
#* makefile.mk
#*------------------------------------------------------------------------------
#* Makefile used to generate the library binary (GNU ARM format).
#* This file was automatically generated by IngeDev. Please, do not edit!
#*******************************************************************************

#-------------------------------------------------------------------------------
# General constants
#-------------------------------------------------------------------------------
EMPTY :=
SPACE := $(EMPTY) $(EMPTY)
COMMA := ,

#-------------------------------------------------------------------------------
# Project and file names
#-------------------------------------------------------------------------------
# Project name
PROJECT_NAME   := FrameworkLib
# Compiler version
COMPILER_VERSION    := GNU ARM 5.3.1 (HWTetra)
# Configuration name
CFG_NAME        := GNU_ARM_DEBUG_TETRA

#-------------------------------------------------------------------------------
# Directories
#-------------------------------------------------------------------------------
# Binaries directory
BIN_DIR         := Bin
# Object directory
OBJ_DIR         := Obj
# Build files directory
BUILD_FILES_DIR := BuildFiles
# Additional libraries object directory
# (set to blank string if no additional libraries)
ADD_LIBS_OBJ_DIR:= _addLibsObj

#-------------------------------------------------------------------------------
# Input files path for the current configuration
#-------------------------------------------------------------------------------
# Build files path
BUILD_FILES_PATH:= $(BUILD_FILES_DIR)/$(CFG_NAME)

#-------------------------------------------------------------------------------
# Output files path for the current configuration
#-------------------------------------------------------------------------------
# Object files path
OBJ_PATH        := $(OBJ_DIR)/$(CFG_NAME)
# Binary files path
BIN_PATH        := $(BIN_DIR)/$(CFG_NAME)
# Additional libraries object files path
ADD_LIBS_OBJ_PATH:=$(OBJ_PATH)/$(ADD_LIBS_OBJ_DIR)

#-------------------------------------------------------------------------------
# Compiler, assembler, archiver...
#-------------------------------------------------------------------------------
# Gnu Compiler executable
CC              := arm-islero-linux-gnueabihf-gcc.exe
# Gnu Assembler executable
AS              := arm-islero-linux-gnueabihf-as.exe
# Gnu Archiver executable
AR              := arm-islero-linux-gnueabihf-ar.exe
# Strip debug symbol executable
STRIP           := arm-islero-linux-gnueabihf-strip.exe  -g

#-------------------------------------------------------------------------------
# Gnu Win32 tools
#-------------------------------------------------------------------------------
# Remove tool
RM              := rm.exe -fr
# Make directory tool
MKDIR           := mkdir.exe -p
# Copy tool
CP              := cp.exe
# Printf tool
PRINTF          := printf

#-------------------------------------------------------------------------------
# Includes path used in compilation process
#-------------------------------------------------------------------------------
INCLUDES_PATH   := \
-IInc \
-IExpInc \
-isystemC:/Ingenico/IngeDev_8.24.0.9/toolchains/gnuArm531v7a-5/arm-islero-linux-gnueabihf/include/c++/5.3.1 \
-isystemC:/Ingenico/IngeDev_8.24.0.9/toolchains/gnuArm531v7a-5/arm-islero-linux-gnueabihf/include/c++/5.3.1/arm-islero-linux-gnueabihf \
-isystemC:/Ingenico/IngeDev_8.24.0.9/toolchains/gnuArm531v7a-5/arm-islero-linux-gnueabihf/include/c++/5.3.1/backward \
-isystemC:/Ingenico/IngeDev_8.24.0.9/toolchains/gnuArm531v7a-5/lib/gcc/arm-islero-linux-gnueabihf/5.3.1/include \
-isystemC:/Ingenico/IngeDev_8.24.0.9/toolchains/gnuArm531v7a-5/lib/gcc/arm-islero-linux-gnueabihf/5.3.1/include-fixed \
-isystemC:/Ingenico/IngeDev_8.24.0.9/toolchains/gnuArm531v7a-5/arm-islero-linux-gnueabihf/include \
-isystemC:/Ingenico/IngeDev_8.24.0.9/toolchains/gnuArm531v7a-5/arm-islero-linux-gnueabihf/sysroot/usr/include \
-IC:/Program\ Files/TeliumSDK/SDK11.20.3.PatchF/SDKTPLUS/HW_TETRA/inc/c/OS \
-IC:/Program\ Files/TeliumSDK/SDK11.20.3.PatchF/SDKTPLUS/HW_TETRA/inc/c/Platform/CommonTools \
-IC:/Program\ Files/TeliumSDK/SDK11.20.3.PatchF/SDKTPLUS/HW_TETRA/inc/c/Platform/Communication \
-IC:/Program\ Files/TeliumSDK/SDK11.20.3.PatchF/SDKTPLUS/HW_TETRA/inc/c/Platform/GOAL \
-IC:/Program\ Files/TeliumSDK/SDK11.20.3.PatchF/SDKTPLUS/HW_TETRA/inc/c/Platform/GTL \
-IC:/Program\ Files/TeliumSDK/SDK11.20.3.PatchF/SDKTPLUS/HW_TETRA/inc/c/Platform/PCL \
-IC:/Program\ Files/TeliumSDK/SDK11.20.3.PatchF/SDKTPLUS/HW_TETRA/inc/c/Platform/SDK \
-IC:/Program\ Files/TeliumSDK/SDK11.20.3.PatchF/SDKTPLUS/HW_TETRA/inc/c/Platform/Security \
-IC:/Program\ Files/TeliumSDK/SDK11.20.3.PatchF/SDKTPLUS/HW_TETRA/inc/c/Platform/SQLite \
-IC:/Program\ Files/TeliumSDK/SDK11.20.3.PatchF/SDKTPLUS/HW_TETRA/inc/c/Platform/TeliumPlusEmulation \
-IC:/Program\ Files/TeliumSDK/SDK11.20.3.PatchF/SDKTPLUS/HW_TETRA/inc/c/Platform/TPass \
-IC:/Program\ Files/TeliumSDK/SDK11.20.3.PatchF/SDKTPLUS/HW_TETRA/inc/cpp \
-IC:/Program\ Files/TeliumSDK/SDK11.20.3.PatchF/SDKTPLUS/HW_TETRA/inc/cpp/ingenico \


#-------------------------------------------------------------------------------
# Includes path used in assembler process
#-------------------------------------------------------------------------------
INCLUDES_ASM_PATH   := \
-IInc \
-IExpInc \

#-------------------------------------------------------------------------------
# Libraries to be included in archive library
#-------------------------------------------------------------------------------
LIBS            := \

#-------------------------------------------------------------------------------
# Archive library result output file
#-------------------------------------------------------------------------------
LIB_FILE        := $(BIN_PATH)/FrameworkLib.a

#-------------------------------------------------------------------------------
# Default compiler, assembler and archiver options
#-------------------------------------------------------------------------------
# Default compiler options
CC_DEF_OPTS     := -g -c -Wall -fPIC
# Default assembler options
AS_DEF_OPTS     := 
# Default archiver options
AR_DEF_OPTS     :=  crs

#Includes opt file
INCLUDE_FILE_OPT:= $(OBJ_PATH)/includesFiles.opt


#-------------------------------------------------------------------------------
# Specific compiler, assembler and archiver options
#-------------------------------------------------------------------------------
# Specific compiler options
CC_SPEC_OPTS    := -mthumb -fstack-protector-strong  -D_ING_GNU_ARM_DEBUG_TETRA
CC_SPEC_OPTS    +=  -D__FRAMEWORK_TELIUM_PLUS__=1 -D_EXPORT_=1 -D_PACKAGE_NAME_=TeliumPlusSDK -DSDK_VERSION=112003 -D__TELIUM3__=1
CC_SPEC_OPTS    +=  -D_ING_TELIUM_SDK_LOC='"C:\Program Files\TeliumSDK\SDK11.20.3.PatchF"' -D_ING_TELIUM_SDK_NAME='"Telium SDK"' -D_ING_TELIUM_SDK_VERSION='"11.20.3.PatchF(b37)"' -D_ING_PROJECT_BUILD_TYPE='"none"' -D_ING_APPLI_BINARY_NAME='"FrameworkLib"' -D_ING_APPLI_CURRENT_CONFIG_NAME='"GNU_ARM_DEBUG_TETRA"' -D_ING_APPLI_FULL_BINARY_NAME='"FrameworkLib.a"'
# Specific assembler options
AS_SPEC_OPTS    := -mthumb  --defsym _ING_GNU_ARM_DEBUG_TETRA=1
AS_SPEC_OPTS    +=  $(INCLUDES_ASM_PATH)
# Specific archiver options
AR_SPEC_OPTS    := 

#-------------------------------------------------------------------------------
# Compiler, assembler and archiver options
# default + specific options
#-------------------------------------------------------------------------------
# Compiler options
CC_OPTS         := $(CC_DEF_OPTS) $(CC_SPEC_OPTS)
# Assembler options
AS_OPTS         := $(AS_DEF_OPTS) $(AS_SPEC_OPTS)
# Archiver options (warning: no space between default and specific options)
AR_OPTS         := $(AR_DEF_OPTS)$(AR_SPEC_OPTS)

#-------------------------------------------------------------------------------
# SRC_OBJS is the list of the project object files
#-------------------------------------------------------------------------------
SRC_OBJS        := \
$(OBJ_PATH)/Buffer.o \
$(OBJ_PATH)/Str.o \
$(OBJ_PATH)/Exception.o \
$(OBJ_PATH)/String.o \
$(OBJ_PATH)/Hsm.o \
$(OBJ_PATH)/KeyInfo.o \
$(OBJ_PATH)/Char.o \
$(OBJ_PATH)/CryptoAlgorithm.o \
$(OBJ_PATH)/CryptoKey.o \
$(OBJ_PATH)/CryptoUtils.o \
$(OBJ_PATH)/KeySizes.o \
$(OBJ_PATH)/SymmetricAlgo.o \

#-------------------------------------------------------------------------------
# Dependencies
#-------------------------------------------------------------------------------
DEPENDENCIES    := \
$(BUILD_FILES_PATH)/makefile.mk

#-------------------------------------------------------------------------------
# Rule for includes @option file
#-------------------------------------------------------------------------------
$(INCLUDE_FILE_OPT):  $(DEPENDENCIES) | createObjDir
	@echo "Includes file list @option generation: "
	$(file >$@)
	@$(foreach Elt,$(subst \ ,|, $(INCLUDES_PATH)),$(file >>$@,"$(subst |,\ ,$(Elt))"))
	@echo "'Finished building: $@'"
	@echo ""


#===============================================================================
# Rule to make the project
#===============================================================================
#-------------------------------------------------------------------------------
# Rule for the library file generation
#-------------------------------------------------------------------------------
$(LIB_FILE): $(SRC_OBJS) $(LIBS)
	@echo "'$@' static library generation in progress..."
	@$(RM) "$@"
	$(AR) $(AR_OPTS) $@ $(SRC_OBJS)
ifeq "$(REMOVE_SYMBOLS)" "true"
	@echo "'$@' strip debug symbols in progress..."
	$(STRIP) $@ -o $(dir $@)_$(notdir $@)
endif
	@echo "'$@' static library file generated."

#===============================================================================
# Rule for the compilation process
#===============================================================================
ifneq ($(MAKECMDGOALS), clean)
-include $(OBJ_PATH)/Buffer.d
endif
$(OBJ_PATH)/Buffer.o: Src/Data/Buffer.cpp $(DEPENDENCIES) $(EXTRA_DEPENDENCIES) $(INCLUDE_FILE_OPT)
	@echo "'Src/Data/Buffer.cpp' compilation in progress..."
	$(CC) $(CC_OPTS) -MMD -MP -o "$@" "$<" @$(INCLUDE_FILE_OPT)
ifeq ($(MAKECMDGOALS), $(OBJ_PATH)/Buffer.o)
	@echo "done!"
endif

ifneq ($(MAKECMDGOALS), clean)
-include $(OBJ_PATH)/Str.d
endif
$(OBJ_PATH)/Str.o: Src/Utils/Str.cpp $(DEPENDENCIES) $(EXTRA_DEPENDENCIES) $(INCLUDE_FILE_OPT)
	@echo "'Src/Utils/Str.cpp' compilation in progress..."
	$(CC) $(CC_OPTS) -MMD -MP -o "$@" "$<" @$(INCLUDE_FILE_OPT)
ifeq ($(MAKECMDGOALS), $(OBJ_PATH)/Str.o)
	@echo "done!"
endif

ifneq ($(MAKECMDGOALS), clean)
-include $(OBJ_PATH)/Exception.d
endif
$(OBJ_PATH)/Exception.o: Src/Utils/Exception.cpp $(DEPENDENCIES) $(EXTRA_DEPENDENCIES) $(INCLUDE_FILE_OPT)
	@echo "'Src/Utils/Exception.cpp' compilation in progress..."
	$(CC) $(CC_OPTS) -MMD -MP -o "$@" "$<" @$(INCLUDE_FILE_OPT)
ifeq ($(MAKECMDGOALS), $(OBJ_PATH)/Exception.o)
	@echo "done!"
endif

ifneq ($(MAKECMDGOALS), clean)
-include $(OBJ_PATH)/String.d
endif
$(OBJ_PATH)/String.o: Src/Data/String.cpp $(DEPENDENCIES) $(EXTRA_DEPENDENCIES) $(INCLUDE_FILE_OPT)
	@echo "'Src/Data/String.cpp' compilation in progress..."
	$(CC) $(CC_OPTS) -MMD -MP -o "$@" "$<" @$(INCLUDE_FILE_OPT)
ifeq ($(MAKECMDGOALS), $(OBJ_PATH)/String.o)
	@echo "done!"
endif

ifneq ($(MAKECMDGOALS), clean)
-include $(OBJ_PATH)/Hsm.d
endif
$(OBJ_PATH)/Hsm.o: Src/Security/Hsm.cpp $(DEPENDENCIES) $(EXTRA_DEPENDENCIES) $(INCLUDE_FILE_OPT)
	@echo "'Src/Security/Hsm.cpp' compilation in progress..."
	$(CC) $(CC_OPTS) -MMD -MP -o "$@" "$<" @$(INCLUDE_FILE_OPT)
ifeq ($(MAKECMDGOALS), $(OBJ_PATH)/Hsm.o)
	@echo "done!"
endif

ifneq ($(MAKECMDGOALS), clean)
-include $(OBJ_PATH)/KeyInfo.d
endif
$(OBJ_PATH)/KeyInfo.o: Src/Security/KeyInfo.cpp $(DEPENDENCIES) $(EXTRA_DEPENDENCIES) $(INCLUDE_FILE_OPT)
	@echo "'Src/Security/KeyInfo.cpp' compilation in progress..."
	$(CC) $(CC_OPTS) -MMD -MP -o "$@" "$<" @$(INCLUDE_FILE_OPT)
ifeq ($(MAKECMDGOALS), $(OBJ_PATH)/KeyInfo.o)
	@echo "done!"
endif

ifneq ($(MAKECMDGOALS), clean)
-include $(OBJ_PATH)/Char.d
endif
$(OBJ_PATH)/Char.o: Src/Utils/Char.cpp $(DEPENDENCIES) $(EXTRA_DEPENDENCIES) $(INCLUDE_FILE_OPT)
	@echo "'Src/Utils/Char.cpp' compilation in progress..."
	$(CC) $(CC_OPTS) -MMD -MP -o "$@" "$<" @$(INCLUDE_FILE_OPT)
ifeq ($(MAKECMDGOALS), $(OBJ_PATH)/Char.o)
	@echo "done!"
endif

ifneq ($(MAKECMDGOALS), clean)
-include $(OBJ_PATH)/CryptoAlgorithm.d
endif
$(OBJ_PATH)/CryptoAlgorithm.o: Src/Security/CryptoAlgorithm.cpp $(DEPENDENCIES) $(EXTRA_DEPENDENCIES) $(INCLUDE_FILE_OPT)
	@echo "'Src/Security/CryptoAlgorithm.cpp' compilation in progress..."
	$(CC) $(CC_OPTS) -MMD -MP -o "$@" "$<" @$(INCLUDE_FILE_OPT)
ifeq ($(MAKECMDGOALS), $(OBJ_PATH)/CryptoAlgorithm.o)
	@echo "done!"
endif

ifneq ($(MAKECMDGOALS), clean)
-include $(OBJ_PATH)/CryptoKey.d
endif
$(OBJ_PATH)/CryptoKey.o: Src/Security/CryptoKey.cpp $(DEPENDENCIES) $(EXTRA_DEPENDENCIES) $(INCLUDE_FILE_OPT)
	@echo "'Src/Security/CryptoKey.cpp' compilation in progress..."
	$(CC) $(CC_OPTS) -MMD -MP -o "$@" "$<" @$(INCLUDE_FILE_OPT)
ifeq ($(MAKECMDGOALS), $(OBJ_PATH)/CryptoKey.o)
	@echo "done!"
endif

ifneq ($(MAKECMDGOALS), clean)
-include $(OBJ_PATH)/CryptoUtils.d
endif
$(OBJ_PATH)/CryptoUtils.o: Src/Security/CryptoUtils.cpp $(DEPENDENCIES) $(EXTRA_DEPENDENCIES) $(INCLUDE_FILE_OPT)
	@echo "'Src/Security/CryptoUtils.cpp' compilation in progress..."
	$(CC) $(CC_OPTS) -MMD -MP -o "$@" "$<" @$(INCLUDE_FILE_OPT)
ifeq ($(MAKECMDGOALS), $(OBJ_PATH)/CryptoUtils.o)
	@echo "done!"
endif

ifneq ($(MAKECMDGOALS), clean)
-include $(OBJ_PATH)/KeySizes.d
endif
$(OBJ_PATH)/KeySizes.o: Src/Security/KeySizes.cpp $(DEPENDENCIES) $(EXTRA_DEPENDENCIES) $(INCLUDE_FILE_OPT)
	@echo "'Src/Security/KeySizes.cpp' compilation in progress..."
	$(CC) $(CC_OPTS) -MMD -MP -o "$@" "$<" @$(INCLUDE_FILE_OPT)
ifeq ($(MAKECMDGOALS), $(OBJ_PATH)/KeySizes.o)
	@echo "done!"
endif

ifneq ($(MAKECMDGOALS), clean)
-include $(OBJ_PATH)/SymmetricAlgo.d
endif
$(OBJ_PATH)/SymmetricAlgo.o: Src/Security/SymmetricAlgo.cpp $(DEPENDENCIES) $(EXTRA_DEPENDENCIES) $(INCLUDE_FILE_OPT)
	@echo "'Src/Security/SymmetricAlgo.cpp' compilation in progress..."
	$(CC) $(CC_OPTS) -MMD -MP -o "$@" "$<" @$(INCLUDE_FILE_OPT)
ifeq ($(MAKECMDGOALS), $(OBJ_PATH)/SymmetricAlgo.o)
	@echo "done!"
endif


#===============================================================================
# Rule for project name and configuration name display
#===============================================================================
.PHONY: displayInfo
displayInfo:
	@echo "                                     *-*-*"
	@echo "--- Project '$(PROJECT_NAME)', Configuration '$(CFG_NAME)', Compiler '$(COMPILER_VERSION)' ---"

#===============================================================================
# Rule for build target progress info display
#===============================================================================
.PHONY: displayBuildInProgress
displayBuildInProgress:
	@echo "Build in progress..."

#===============================================================================
# Rule for output directories creation
#===============================================================================
createObjDir: | $(OBJ_PATH)

$(OBJ_PATH):
	@$(MKDIR) "$(OBJ_PATH)"

createBinDir: | $(BIN_PATH)

$(BIN_PATH):
	@$(MKDIR) "$(BIN_PATH)"


#===============================================================================
# Make build rule
#===============================================================================
.PHONY: build
build: displayInfo displayBuildInProgress createObjDir createBinDir $(LIB_FILE)
	@echo "done!"
